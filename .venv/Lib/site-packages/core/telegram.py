from telethon import TelegramClient, sync, events
from telethon.tl.types import InputMessagesFilterUrl 
from .constant import *

class Messages():
    def __init__(self, chatid, 
                 min_id_mess, 
                 api_id = api_id, 
                 api_hash = api_hash,
                 session_name = session_name):
        client = TelegramClient(session_name, api_id, api_hash)
        client.start()
        self.chatid = chatid
        self.min_id_mess = min_id_mess
        self.client = client

    def __get_messages(self):
        messages = self.client.get_messages(self.chatid, max_count_messages, min_id = self.min_id_mess, filter=InputMessagesFilterUrl)
        return messages

    def get_track_id(url):
        index = url.find(play_music_url)
        track_id = ""
        if index:
            tmp_url = url[index-1:]
            index = tmp_url.find(last_play_music_simvol)
            tmp_url = tmp_url[index+3:]
            spliter_index = tmp_url.find(play_music_spliter_url)
            track_id = tmp_url[:spliter_index]
        else:
            print ("not found")
        return track_id

    def get_play_list(url):
        play_list_name = ""
        index = url.find(play_music_indetificator)
        if index != -1:
            tmp_url = url[index + 1:]
            temp_simvol = tmp_url[0]
            if temp_simvol == "'" or temp_simvol == '"': #if play list name use ""
                index = tmp_url[1:].find(temp_simvol)
                if index == -1:
                    return ""
                else:
                    play_list_name = tmp_url[1:index+1]
            else:
                index = tmp_url.find(" ")
                if index == -1:
                    index = tmp_url[1:].find(play_music_url)
                    if index != -1:
                        play_list_name = tmp_url[:index]
                    else:
                        play_list_name = tmp_url
                else:
                    play_list_name = tmp_url[:index]
        return play_list_name


    def get_songs(self):
        messages = self.__get_messages()
        set_songs = set()
        for message in messages:
            track_id = Messages.get_track_id(message.message)
            
            if track_id:
                
                play_list_name = Messages.get_play_list(message.message)
                message_struct = MessageStruct(track_id, play_list_name)
                print(track_id +'==' + play_list_name)
                #temp_dict = {'track_id': track_id, 'play_list_name': play_list_name}
                set_songs.add(message_struct)
        return set_songs


class MessageStruct():
    def __init__(self, track_id, play_list_name):
        self.track_id = track_id
        self.play_list_name = play_list_name

    def get_message(self):
        return self.track_id, self.play_list_name

class Client():
    def __init__(self, telegram_client):
        self.client = telegram_client

    async def send_message(self, message):
        print('3')
        client  = self.client
        if message:
            client.send_message(user_name, message)