from gmusicapi import Mobileclient
from telethon import TelegramClient, sync, events
from .constant import * 

class PlayMusic():
    def __init__(self, device_id = device_id, first = False):
        api = Mobileclient()
        if first:
            api.perform_oauth()
        api.oauth_login(device_id)
        self.api = api 
        self.play_list_dict = {}
        self.play_list_songs_dict = {}
        self.new_play_lists = set()

    def get_new_play_lists(self):
        return self.new_play_lists

    def get_api(self):
        return self.api

    def get_id_play_list(self, play_list_name):
        play_list_id = 0
        print(play_list_name)
        if play_list_name:
            temp_play_list_id = self.play_list_dict.get(play_list_name)
            if temp_play_list_id is None:
                print('here')
                play_list = self.find_or_create(play_list_name)
                play_list_id = play_list['id']
                self.play_list_dict[play_list_name] = play_list_id
            else:
                play_list_id = temp_play_list_id
        return play_list_id

    def get_set_play_list_songs(self, play_list_id):
        set_songs = set()
        play_list_name = self.find_play_list(play_list_id, "id")["name"]
        struct = self.play_list_songs_dict.get(play_list_name)
        if struct is None:            
            play_list = self.find_or_create(play_list_name)
            temp_list_song = self.api.get_shared_playlist_contents(play_list["shareToken"])
            for i in temp_list_song:
                set_songs.add(i["trackId"])
            struct = PlayMusicStruct(set_songs)
            self.play_list_songs_dict[play_list_name] = struct
        else:
            set_songs = struct.get_struct()
        return set_songs

    def add_set_song_to_play_list(self, default_play_list_name, message_struct):
        
        if len(message_struct) > 0:
            for j in message_struct:
                track_id, temp_play_list_name = j.get_message()                             
                if temp_play_list_name:
                    play_list_id = self.get_id_play_list(temp_play_list_name)
                else:
                    play_list_id = self.get_id_play_list(default_play_list_name)

                set_songs = self.get_set_play_list_songs(play_list_id)
                if track_id and not (track_id in set_songs):
                    self.api.add_songs_to_playlist(play_list_id, track_id)
        else:
            print("not found")

    def find_play_list(self, play_list_value, key = "name"):
        play_lists = self.api.get_all_playlists()
        key_value = str(play_list_value)
        for play_list in play_lists:
            if str(play_list[key]) == key_value:
                return play_list
        else:
            return None

    def find_or_create(self, play_list_name):
        play_list = self.find_play_list(play_list_name)
        print(play_list)
        if play_list is None:
            print("CREATE")            
            play_list_id = self.api.create_playlist(play_list_name, public=True)
            play_list = self.find_play_list(play_list_id, "id")
            print(play_list_created + play_music_play_list_url + play_list_id)
            self.new_play_lists.add(play_list_id)
        return play_list

class PlayMusicStruct():
    def __init__(self, set_songs):
        self.set_songs = set_songs

    def get_struct(self):
        return self.set_songs